# Azure Deployment Plan for Zenith Student Marketplace

## **Goal**
Deploy the Zenith Student Marketplace to Azure using optimal services within a $100 budget, including Next.js frontend, Express.js backend, and MySQL database.

## **Project Information**
**AppName**: Zenith Student Marketplace
- **Technology Stack**: 
  - Frontend: Next.js 15.2.4 with React 19, TypeScript, Tailwind CSS
  - Backend: Express.js with Node.js, simple REST API
  - Database: MySQL with Prisma ORM
  - Authentication: JWT-based auth system
- **Application Type**: Student marketplace platform for buying/selling items
- **Containerization**: Will be containerized for Azure Container Apps deployment
- **Dependencies**: MySQL database, file storage for product images
- **Hosting Recommendation**: 
  - Azure Static Web Apps for frontend (free tier)
  - Azure Container Apps for backend (consumption plan)
  - Azure Database for MySQL Flexible Server

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Client"
        B[Users/Browsers]
    end
    
    subgraph "Azure Static Web Apps"
        F[Next.js Frontend<br/>React App]
    end
    
    subgraph "Azure Container Apps"
        A[Express.js Backend<br/>Node.js API]
    end
    
    subgraph "Azure Database"
        D[MySQL Flexible Server<br/>Prisma ORM]
    end
    
    subgraph "Azure Storage"
        S[Blob Storage<br/>Product Images]
    end
    
    subgraph "Monitoring"
        AI[Application Insights]
        LA[Log Analytics]
    end
    
    subgraph "Security"
        KV[Key Vault<br/>Connection Strings]
        MI[Managed Identity]
    end
    
    B --> F
    F --> A
    A --> D
    A --> S
    A --> KV
    MI --> D
    MI --> S
    A --> AI
    F --> AI
    AI --> LA
```

**Data Flow**:
- Users access the Next.js frontend through Azure Static Web Apps
- Frontend makes API calls to the Express.js backend running on Container Apps
- Backend connects to MySQL database using Prisma ORM
- Product images are stored and served from Azure Blob Storage
- All services send telemetry to Application Insights for monitoring

## **Recommended Azure Resources**

### **Frontend Application**
- **Application**: zenith-frontend
  - **Hosting Service Type**: Azure Static Web Apps
  - **SKU**: Free tier (100GB bandwidth, custom domain, SSL)
  - **Configuration**:
    - Framework: Next.js
    - Build Command: `npm run build`
    - Output Location: `out` (for static export)
    - Environment Variables: 
      - `NEXT_PUBLIC_API_URL`: Backend API URL

### **Backend Application**
- **Application**: zenith-backend
  - **Hosting Service Type**: Azure Container Apps
  - **SKU**: Consumption plan (0.5 vCPU, 1GB RAM, auto-scaling)
  - **Configuration**:
    - Language: Node.js
    - dockerFilePath: `backend/Dockerfile`
    - dockerContext: `backend`
    - Port: 3001
    - Environment Variables:
      - `DATABASE_URL`: MySQL connection string
      - `JWT_SECRET`: Authentication secret
      - `NODE_ENV`: production
      - `STORAGE_CONNECTION_STRING`: Azure Storage connection
  
  - **Dependencies**:
    - **MySQL Database**
      - **Service Type**: Azure Database for MySQL Flexible Server
      - **SKU**: Burstable B1ms (1 vCore, 2GB RAM, 32GB storage)
      - **Connection Type**: Connection string stored in Key Vault
      - **Features**: SSL enabled, backup retention 7 days
    
    - **File Storage**
      - **Service Type**: Azure Storage Account (Blob Storage)
      - **SKU**: Standard LRS
      - **Connection Type**: Managed Identity
      - **Purpose**: Store product images and user uploads

### **Supporting Services**
- **Application Insights**: Monitor both frontend and backend performance
- **Log Analytics Workspace**: Centralized logging for all services
- **Key Vault**: Store sensitive configuration (database connection strings, JWT secrets)
- **Container Registry**: Store Docker images for the backend application

### **Security Configurations**
- **User Managed Identity**: Assigned to Container Apps for secure Azure service access
- **AcrPull Role Assignment**: Managed Identity has AcrPull role for Container Registry
- **Key Vault Access Policy**: Container Apps can read secrets via Managed Identity
- **MySQL Security**: SSL enforced, firewall configured for Azure services only
- **Storage Security**: Private access, accessible only via Managed Identity

## **Execution Steps**

### **Phase 1: Infrastructure Setup**
1. **Generate Infrastructure as Code**:
   - Create Bicep templates for all Azure resources
   - Configure resource dependencies and networking
   - Set up security configurations

2. **Provision Azure Resources**:
   - Run `azd provision --preview` to validate deployment
   - Execute `azd up` to create all resources
   - Verify resource creation in Azure Portal

### **Phase 2: Application Deployment**
1. **Backend Deployment**:
   - Create Dockerfile for Express.js application
   - Build and push Docker image to Container Registry
   - Deploy container to Azure Container Apps
   - Configure environment variables and secrets

2. **Database Setup**:
   - Run Prisma migrations against Azure MySQL
   - Seed database with initial data
   - Verify database connectivity

3. **Frontend Deployment**:
   - Configure Next.js for static export
   - Deploy to Azure Static Web Apps
   - Configure API backend URL

### **Phase 3: Validation & Monitoring**
1. **Application Testing**:
   - Test frontend-backend connectivity
   - Verify database operations
   - Test file upload functionality

2. **Monitoring Setup**:
   - Configure Application Insights
   - Set up health checks
   - Create alerting rules

## **Estimated Monthly Costs**
- Azure Static Web Apps: **FREE**
- Container Apps (Consumption): **$10-15**
- MySQL Flexible Server (B1ms): **$20-30**
- Storage Account: **$2-5**
- Application Insights: **$0-5**
- **Total: $32-55/month** (2+ months with $100 credits)

## **Next Steps**
1. Execute this deployment plan
2. Set up CI/CD pipeline for automated deployments
3. Configure custom domain and SSL certificates
4. Implement monitoring and alerting
5. Scale resources based on usage patterns