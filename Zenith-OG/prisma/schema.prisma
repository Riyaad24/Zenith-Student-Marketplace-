// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  avatar     String?
  phone      String?
  university String?
  location   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  products      Product[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  addresses     Address[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  image       String?
  images      String?  // JSON array of image URLs
  condition   String   // new, used, refurbished
  status      String   @default("active") // active, sold, inactive
  available   Boolean  @default(true)
  location    String?  // City or area for local pickup
  university  String?  // Associated university/college
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  categoryId String
  sellerId   String

  // Relations
  category  Category     @relation(fields: [categoryId], references: [id])
  seller    User         @relation(fields: [sellerId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]
  reviews   Review[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String   @id @default(cuid())
  total         Float
  status        String   @default("pending") // pending, confirmed, shipped, delivered, cancelled
  shippingCost  Float    @default(0)
  tax           Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign keys
  userId String

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  address    Address?    @relation(fields: [addressId], references: [id])
  addressId  String?

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Float

  // Foreign keys
  orderId   String
  productId String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id         String   @id @default(cuid())
  type       String   // shipping, billing
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String   @default("South Africa")
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign keys
  userId String

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  senderId   String
  receiverId String

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}
