// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  firstName  String?  @map("first_name")
  lastName   String?  @map("last_name")
  avatar     String?  @map("avatar_url")
  phone      String?
  university String?
  location   String?
  bio        String?
  verified   Boolean  @default(false)
  
  // Verification documents
  profilePicture    String?  @map("profile_picture")
  studentCardImage  String?  @map("student_card_image") // Proof of registration/enrolment letter
  idDocumentImage   String?  @map("id_document_image")
  
  // Verification status
  documentsUploaded Boolean  @default(false) @map("documents_uploaded")
  adminVerified     Boolean  @default(false) @map("admin_verified")
  verificationNotes String?  @map("verification_notes")
  verifiedAt        DateTime? @map("verified_at")
  
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  products      Product[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  addresses     Address[]
  notifications Notification[]
  wishlistItems WishlistItem[]
  
  // Security Relations
  security      AccountSecurity?
  roleAssignments UserRoleAssignment[]
  sessions      UserSession[]
  auditLogs     SecurityAuditLog[]
  dataAccessLogs DataAccessLog[]
  admin         Admin?

  @@map("profiles")
}

// Security Models
model UserRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  assignments UserRoleAssignment[]

  @@map("user_roles")
}

model UserRoleAssignment {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     String    @map("role_id")
  assignedBy String?   @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")

  // Relations
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], name: "unique_user_role")
  @@map("user_role_assignments")
}

model AccountSecurity {
  id                    String    @id @default(cuid())
  userId                String    @unique @map("user_id")
  passwordHash          String    @map("password_hash")
  salt                  String
  twoFactorEnabled      Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret       String?   @map("two_factor_secret")
  backupCodes           Json?     @map("backup_codes")
  passwordResetToken    String?   @map("password_reset_token")
  passwordResetExpires  DateTime? @map("password_reset_expires")
  emailVerificationToken String?  @map("email_verification_token")
  emailVerified         Boolean   @default(false) @map("email_verified")
  emailVerifiedAt       DateTime? @map("email_verified_at")
  accountLocked         Boolean   @default(false) @map("account_locked")
  lockedUntil           DateTime? @map("locked_until")
  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")
  lastLogin             DateTime? @map("last_login")
  lastPasswordChange    DateTime  @default(now()) @map("last_password_change")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_security")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  lastAccessed DateTime @updatedAt @map("last_accessed")
  isActive     Boolean  @default(true) @map("is_active")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SecurityAuditLog {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  details      Json?
  riskLevel    String   @default("LOW") @map("risk_level") // LOW, MEDIUM, HIGH, CRITICAL
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_audit_logs")
}

model LoginAttempt {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String   @map("ip_address")
  userAgent     String?  @map("user_agent")
  success       Boolean
  failureReason String?  @map("failure_reason")
  attemptedAt   DateTime @default(now()) @map("attempted_at")

  @@map("login_attempts")
}

model DataAccessLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  tableName  String   @map("table_name")
  recordId   String?  @map("record_id")
  operation  String   // SELECT, INSERT, UPDATE, DELETE
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  accessedAt DateTime @default(now()) @map("accessed_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("data_access_logs")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  quantity    Int      @default(1) // Available quantity/inventory
  image       String?
  images      String?  // JSON array of image URLs
  condition   String   // new, used, refurbished
  status      String   @default("active") // active, sold, inactive
  available   Boolean  @default(true)
  location    String?  // City or area for local pickup
  university  String?  // Associated university/college
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  categoryId String
  sellerId   String

  // Relations
  category  Category     @relation(fields: [categoryId], references: [id])
  seller    User         @relation(fields: [sellerId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]
  reviews   Review[]
  wishlistItems WishlistItem[]
  messages  Message[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String   @id @default(cuid())
  total         Float
  status        String   @default("pending") // pending, confirmed, shipped, delivered, cancelled
  shippingCost  Float    @default(0)
  tax           Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign keys
  userId String

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  address    Address?    @relation(fields: [addressId], references: [id])
  addressId  String?

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Float

  // Foreign keys
  orderId   String
  productId String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id         String   @id @default(cuid())
  type       String   // shipping, billing
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String   @default("South Africa")
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign keys
  userId String

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  productId String?  @map("product_id") // Optional product reference for product-related messages
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign keys
  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")

  // Relations
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // order_status, product_review, message, system, verification
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional metadata for different notification types
  metadata  Json?    // Can store order ID, product ID, etc.

  // Foreign keys
  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  productId String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Admin Models
model Admin {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  studentNumber     String?   @map("student_number") // 9 digits without 'ads'
  email             String?   // Store admin email for reference
  permissions       Json      @default("[]") // Array of permission strings
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  signInLogs        AdminSignInLog[]
  auditActions      AdminAuditLog[]

  @@index([studentNumber])
  @@index([email])
  @@map("admins")
}

model AdminSignInLog {
  id            String   @id @default(cuid())
  adminId       String   @map("admin_id")
  ipAddress     String   @map("ip_address")
  userAgent     String?  @map("user_agent")
  signInAt      DateTime @default(now()) @map("sign_in_at")
  location      String?  // Geo location if available
  deviceInfo    Json?    @map("device_info") // Browser, OS, etc.
  
  // Relations
  admin         Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sign_in_logs")
}

model AdminAuditLog {
  id            String   @id @default(cuid())
  adminId       String?  @map("admin_id")
  action        String   // CREATE_USER, UPDATE_USER, DELETE_USER, etc.
  targetType    String   @map("target_type") // USER, PRODUCT, ORDER, etc.
  targetId      String?  @map("target_id")
  oldValues     Json?    @map("old_values")
  newValues     Json?    @map("new_values")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  admin         Admin?   @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@map("admin_audit_logs")
}
